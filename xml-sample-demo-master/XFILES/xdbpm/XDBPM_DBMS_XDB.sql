
/* ================================================  
 * Oracle XFiles Demonstration.  
 *    
 * Copyright (c) 2014 Oracle and/or its affiliates.  All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "as IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * ================================================
 */

--
CREATE OR REPLACE PACKAGE XDBPM_DBMS_XDB 
AUTHID &RIGHTS
IS 
  FUNCTION LOCKRESOURCE(ABSPATH IN VARCHAR2, DEPTHZERO IN BOOLEAN, SHARED IN BOOLEAN) return BOOLEAN;
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
$ELSE
  FUNCTION LOCKRESOURCE(ABSPATH IN VARCHAR2, DEPTHZERO IN BOOLEAN, SHARED IN BOOLEAN, TOKEN OUT VARCHAR2, TIMEOUT IN PLS_INTEGER := DBMS_XDB.DEFAULT_LOCK_TIMEOUT) return BOOLEAN; 
  PROCEDURE REFRESHLOCK(ABSPATH IN VARCHAR2, TOKEN IN VARCHAR2, NEWTIMEOUT IN  PLS_INTEGER := DBMS_XDB.DEFAULT_LOCK_TIMEOUT);
$END
  FUNCTION LOCKDISCOVERY(ABSPATH IN VARCHAR2) return SYS.XMLTYPE;
  PROCEDURE GETLOCKTOKEN(ABSPATH IN VARCHAR2, LOCKTOKEN OUT VARCHAR2);
  FUNCTION UNLOCKRESOURCE(ABSPATH IN VARCHAR2, DELTOKEN IN VARCHAR2 := NULL) return BOOLEAN;
  PROCEDURE ADDTOLOCKTOKENLIST(TOKEN IN VARCHAR2);
  FUNCTION DELETEFROMLOCKTOKENLIST(TOKEN IN VARCHAR2) return BOOLEAN;
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
$ELSE
  FUNCTION GETLOCKTOKENLIST return XDB.LOCKTOKENLISTTYPE;
$END
  FUNCTION EXISTSRESOURCE(ABSPATH IN VARCHAR2) return BOOLEAN;
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
$ELSIF DBMS_DB_VERSION.VER_LE_11_1 $THEN
$ELSE
  FUNCTION CREATERESOURCE(ABSPATH IN VARCHAR2, DATA IN VARCHAR2, SCHEMAURL IN VARCHAR2 := NULL, ELEM IN VARCHAR2 := NULL) return BOOLEAN;
  FUNCTION CREATERESOURCE(ABSPATH IN VARCHAR2, DATA IN SYS.XMLTYPE, SCHEMAURL IN VARCHAR2 := NULL, ELEM IN VARCHAR2 := NULL) return BOOLEAN;
$END
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
  FUNCTION CREATERESOURCE(ABSPATH IN VARCHAR2, DATA IN REF SYS.XMLTYPE, STICKY IN BOOLEAN := TRUE) return BOOLEAN;
$ELSE
  FUNCTION CREATERESOURCE(ABSPATH IN VARCHAR2, DATA IN REF SYS.XMLTYPE, STICKY IN BOOLEAN := TRUE, CALCSIZE IN BOOLEAN := FALSE) return BOOLEAN;
$END
  FUNCTION CREATERESOURCE(ABSPATH IN VARCHAR2, DATA IN CLOB) return BOOLEAN;
  FUNCTION CREATERESOURCE(ABSPATH IN VARCHAR2, DATA IN BFILE, CSID IN NUMBER := 0) return BOOLEAN;
  FUNCTION CREATERESOURCE(ABSPATH IN VARCHAR2, DATA IN BLOB, CSID IN NUMBER := 0) return BOOLEAN;
  FUNCTION CREATEFOLDER(ABSPATH IN VARCHAR2) return BOOLEAN;
  FUNCTION ADDRESOURCE(ABSPATH IN VARCHAR2, DATA IN VARCHAR2) return NUMBER;
  PROCEDURE DELETERESOURCE(ABSPATH IN VARCHAR2, DELETE_OPTION IN PLS_INTEGER := DBMS_XDB.DELETE_RESOURCE);
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
  PROCEDURE LINK(SRCPATH IN VARCHAR2, LINKFOLDER IN VARCHAR2, LINKNAME IN VARCHAR2);
$ELSE
  PROCEDURE LINK(SRCPATH IN VARCHAR2, LINKFOLDER IN VARCHAR2, LINKNAME IN VARCHAR2, LINKTYPE IN PLS_INTEGER := DBMS_XDB.LINK_TYPE_HARD);
$END
  PROCEDURE RENAMERESOURCE(SRCPATH IN VARCHAR2, DESTFOLDER IN VARCHAR2, NEWNAME IN VARCHAR2);
  FUNCTION GETACLDOCUMENT(ABSPATH IN VARCHAR2) return SYS.XMLTYPE;
  FUNCTION GETPRIVILEGES(RES_PATH IN VARCHAR2) return SYS.XMLTYPE;
  FUNCTION CHANGEPRIVILEGES(RES_PATH IN VARCHAR2, ACE IN XMLTYPE) return PLS_INTEGER;
  FUNCTION CHECKPRIVILEGES(RES_PATH IN VARCHAR2, PRIVS IN XMLTYPE) return PLS_INTEGER;
  PROCEDURE SETFTPPORT(NEW_PORT IN NUMBER);
  FUNCTION GETFTPPORT return NUMBER;
  PROCEDURE SETHTTPPORT(NEW_PORT IN NUMBER);
  FUNCTION GETHTTPPORT return NUMBER;
  PROCEDURE SETLISTENERENDPOINT(ENDPOINT IN NUMBER, HOST IN VARCHAR2, PORT IN NUMBER, PROTOCOL IN NUMBER);
  PROCEDURE GETLISTENERENDPOINT(ENDPOINT IN NUMBER, HOST OUT VARCHAR2, PORT OUT NUMBER, PROTOCOL OUT NUMBER);
  PROCEDURE SETLISTENERLOCALACCESS(L_ACCESS BOOLEAN);
  PROCEDURE SETACL(RES_PATH IN VARCHAR2, ACL_PATH IN VARCHAR2); FUNCTION ACLCHECKPRIVILEGES(ACL_PATH IN VARCHAR2, OWNER IN VARCHAR2, PRIVS IN XMLTYPE) return PLS_INTEGER;
  PROCEDURE CFG_REFRESH;
  FUNCTION CFG_GET return SYS.XMLTYPE;
  PROCEDURE CFG_UPDATE(XDBCONFIG IN SYS.XMLTYPE);
  FUNCTION GETRESOID(ABSPATH IN VARCHAR2) return RAW;
  FUNCTION CREATEOIDPATH(OID IN RAW) return VARCHAR2;
  PROCEDURE APPENDRESOURCEMETADATA(ABSPATH IN VARCHAR2, DATA IN SYS.XMLTYPE);
  PROCEDURE APPENDRESOURCEMETADATA(ABSPATH IN VARCHAR2, DATA IN REF SYS.XMLTYPE);
  PROCEDURE DELETERESOURCEMETADATA(ABSPATH IN VARCHAR2, METADATA IN REF SYS.XMLTYPE, DELETE_OPTION IN PLS_INTEGER := DBMS_XDB.DELETE_RES_METADATA_CASCADE);
  PROCEDURE DELETERESOURCEMETADATA(ABSPATH IN VARCHAR2, METADATANS IN VARCHAR2, METADATANAME IN VARCHAR2, DELETE_OPTION IN PLS_INTEGER := DBMS_XDB.DELETE_RES_METADATA_CASCADE);
  PROCEDURE UPDATERESOURCEMETADATA(ABSPATH IN VARCHAR2, OLDMETADATA IN REF SYS.XMLTYPE, NEWMETADATA IN REF SYS.XMLTYPE);
  PROCEDURE UPDATERESOURCEMETADATA(ABSPATH IN VARCHAR2, OLDMETADATA IN REF SYS.XMLTYPE, NEWMETADATA IN XMLTYPE);
  PROCEDURE UPDATERESOURCEMETADATA(ABSPATH IN VARCHAR2, OLDNS IN VARCHAR2, OLDNAME IN VARCHAR, NEWMETADATA IN XMLTYPE);
  PROCEDURE UPDATERESOURCEMETADATA(ABSPATH IN VARCHAR2, OLDNS IN VARCHAR2, OLDNAME IN VARCHAR, NEWMETADATA IN REF SYS.XMLTYPE);
  PROCEDURE PURGERESOURCEMETADATA(ABSPATH IN VARCHAR2);
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
$ELSE
  FUNCTION GETRESOURCE(ABSPATH IN VARCHAR2) return DBMS_XDBRESOURCE.XDBRESOURCE;
$END
  PROCEDURE REFRESHCONTENTSIZE( ABSPATH IN VARCHAR2, 	       RECURSE IN BOOLEAN := FALSE );
  PROCEDURE PROCESSLINKS(ABSPATH IN VARCHAR2, RECURSE IN BOOLEAN := FALSE );
  FUNCTION ISFOLDER(ABSPATH IN VARCHAR2) return BOOLEAN;
  PROCEDURE TOUCHRESOURCE(ABSPATH IN VARCHAR2 );
  PROCEDURE CHANGEOWNER( ABSPATH IN VARCHAR2, OWNER IN VARCHAR2, RECURSE IN BOOLEAN := FALSE );
  PROCEDURE ADDMIMEMAPPING(EXTENSION IN VARCHAR2,MIMETYPE IN VARCHAR2);
  PROCEDURE DELETEMIMEMAPPING(EXTENSION IN VARCHAR2);
  PROCEDURE ADDXMLEXTENSION(EXTENSION IN VARCHAR2);
  PROCEDURE DELETEXMLEXTENSION(EXTENSION IN VARCHAR2);
  PROCEDURE ADDSERVLETMAPPING(	PATTERN IN VARCHAR2,	NAME IN VARCHAR2);
  PROCEDURE DELETESERVLETMAPPING(	NAME IN VARCHAR2);
  PROCEDURE ADDSERVLET(NAME IN VARCHAR2,LANGUAGE IN VARCHAR2,DISPNAME IN VARCHAR2,ICON IN VARCHAR2 := NULL,DESCRIPT IN VARCHAR2 := NULL,CLASS IN VARCHAR2 := NULL,JSPFILE IN VARCHAR2 := NULL,PLSQL IN VARCHAR2 := NULL,SCHEMA IN VARCHAR2 := NULL);
  PROCEDURE DELETESERVLET(	NAME IN VARCHAR2);
  PROCEDURE ADDSERVLETSECROLE(	SERVNAME IN VARCHAR2,	ROLENAME IN VARCHAR2,	ROLELINK IN VARCHAR2,	DESCRIPT IN VARCHAR2 := NULL);
  PROCEDURE DELETESERVLETSECROLE(SERVNAME IN VARCHAR2,ROLENAME IN VARCHAR2);
  PROCEDURE ADDSCHEMALOCMAPPING(NAMESPACE IN VARCHAR2,ELEMENT IN VARCHAR2,SCHEMAURL IN VARCHAR2);
  PROCEDURE DELETESCHEMALOCMAPPING(SCHEMAURL IN VARCHAR2);
  FUNCTION HASCHARCONTENT(ABSPATH IN VARCHAR2) return BOOLEAN;
  FUNCTION HASXMLCONTENT(ABSPATH IN VARCHAR2) return BOOLEAN;
  FUNCTION HASXMLREFERENCE(ABSPATH IN VARCHAR2) return BOOLEAN;
  FUNCTION HASBLOBCONTENT(ABSPATH IN VARCHAR2) return BOOLEAN;
  FUNCTION GETCONTENTCLOB(ABSPATH IN VARCHAR2) return CLOB;
  FUNCTION GETCONTENTBLOB( ABSPATH IN VARCHAR2,CSID OUT PLS_INTEGER,LOCKSRC IN BOOLEAN := FALSE) return BLOB;
  FUNCTION GETCONTENTXMLTYPE( ABSPATH IN VARCHAR2) return SYS.XMLTYPE;
  FUNCTION GETCONTENTVARCHAR2( ABSPATH IN VARCHAR2) return VARCHAR2;
  FUNCTION GETCONTENTXMLREF( ABSPATH IN VARCHAR2) return REF SYS.XMLTYPE;
  FUNCTION GETXDB_TABLESPACE return VARCHAR2;
  PROCEDURE ADDHTTPEXPIREMAPPING(PATTERN IN VARCHAR2, EXPIRE IN VARCHAR2);
  PROCEDURE DELETEHTTPEXPIREMAPPING(PATTERN IN VARCHAR2);
  FUNCTION GETHTTPREQUESTHEADER(HEADER_NAME IN VARCHAR2)return VARCHAR2;
end XDBPM_DBMS_XDB;
/
SHOW ERRORS
--
CREATE OR REPLACE PACKAGE BODY XDBPM_DBMS_XDB 
as
  UNIMPLEMENTED_FEATURE EXCEPTION;
  PRAGMA EXCEPTION_INIT( UNIMPLEMENTED_FEATURE , -03001 );

--
FUNCTION LOCKRESOURCE(ABSPATH IN VARCHAR2, DEPTHZERO IN BOOLEAN, SHARED IN BOOLEAN) 
return BOOLEAN
as
begin
  return &PACKAGE_PREFIX.XDB.LOCKRESOURCE(ABSPATH, DEPTHZERO, SHARED );
end;
--
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
$ELSE
--
FUNCTION LOCKRESOURCE(ABSPATH IN VARCHAR2, DEPTHZERO IN BOOLEAN, SHARED IN BOOLEAN, TOKEN OUT VARCHAR2, TIMEOUT IN PLS_INTEGER := DBMS_XDB.DEFAULT_LOCK_TIMEOUT)
return BOOLEAN
as
begin
  return &PACKAGE_PREFIX.XDB.LOCKRESOURCE(ABSPATH, DEPTHZERO, SHARED , TOKEN, TIMEOUT);
end;
--
PROCEDURE REFRESHLOCK(ABSPATH IN VARCHAR2, TOKEN IN VARCHAR2, NEWTIMEOUT IN  PLS_INTEGER := DBMS_XDB.DEFAULT_LOCK_TIMEOUT)
as
begin
   &PACKAGE_PREFIX.XDB.REFRESHLOCK(ABSPATH, TOKEN , NEWTIMEOUT);
end;
--
$END
--
FUNCTION LOCKDISCOVERY(ABSPATH IN VARCHAR2)
return SYS.XMLTYPE
as
begin
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
  raise UNIMPLEMENTED_FEATURE;
$ELSE
  return &PACKAGE_PREFIX.XDB.LOCKDISCOVERY(ABSPATH);
$END
end;
--
PROCEDURE GETLOCKTOKEN(ABSPATH IN VARCHAR2, LOCKTOKEN OUT VARCHAR2)
as
begin
   &PACKAGE_PREFIX.XDB.GETLOCKTOKEN(ABSPATH, LOCKTOKEN);
end;
--
FUNCTION UNLOCKRESOURCE(ABSPATH IN VARCHAR2, DELTOKEN IN VARCHAR2 := NULL)
return BOOLEAN
as
begin
  return &PACKAGE_PREFIX.XDB.UNLOCKRESOURCE(ABSPATH, DELTOKEN);
end;
--
PROCEDURE ADDTOLOCKTOKENLIST(TOKEN IN VARCHAR2)
as
begin
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
  raise UNIMPLEMENTED_FEATURE;
$ELSE
   &PACKAGE_PREFIX.XDB.ADDTOLOCKTOKENLIST(TOKEN);
$END
end;
--
FUNCTION DELETEFROMLOCKTOKENLIST(TOKEN  IN VARCHAR2)
return BOOLEAN
as
begin
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
  raise UNIMPLEMENTED_FEATURE;
$ELSE
  return &PACKAGE_PREFIX.XDB.DELETEFROMLOCKTOKENLIST(TOKEN);
$END
end;
--
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
$ELSE
--
FUNCTION GETLOCKTOKENLIST return XDB.LOCKTOKENLISTTYPE
as
begin
  return &PACKAGE_PREFIX.XDB.GETLOCKTOKENLIST;
end;
--
$END
--
FUNCTION EXISTSRESOURCE(ABSPATH IN VARCHAR2)
return BOOLEAN
as
begin
  return &PACKAGE_PREFIX.XDB.EXISTSRESOURCE(ABSPATH);
end;
--
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
$ELSIF DBMS_DB_VERSION.VER_LE_11_1 $THEN
$ELSE
FUNCTION CREATERESOURCE(ABSPATH IN VARCHAR2, DATA IN VARCHAR2, SCHEMAURL IN VARCHAR2 := NULL, ELEM IN VARCHAR2 := NULL) 
return BOOLEAN
as
begin
  return &PACKAGE_PREFIX.XDB.CREATERESOURCE(ABSPATH, DATA, SCHEMAURL, ELEM);
end;
--
FUNCTION CREATERESOURCE(ABSPATH IN VARCHAR2, DATA IN SYS.XMLTYPE, SCHEMAURL IN VARCHAR2 := NULL, ELEM IN VARCHAR2 := NULL)
return BOOLEAN
as
begin
  return &PACKAGE_PREFIX.XDB.CREATERESOURCE(ABSPATH, DATA, SCHEMAURL, ELEM);
end;
--
$END
--
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
FUNCTION CREATERESOURCE(ABSPATH IN VARCHAR2, DATA IN REF SYS.XMLTYPE, STICKY IN BOOLEAN := TRUE)
return BOOLEAN
as
begin
  return &PACKAGE_PREFIX.XDB.CREATERESOURCE(ABSPATH, DATA, STICKY);
end;
--
$ELSE
--
FUNCTION CREATERESOURCE(ABSPATH IN VARCHAR2, DATA IN REF SYS.XMLTYPE, STICKY IN BOOLEAN := TRUE, CALCSIZE IN BOOLEAN := FALSE)
return BOOLEAN
as
begin
  return &PACKAGE_PREFIX.XDB.CREATERESOURCE(ABSPATH, DATA, STICKY, CALCSIZE);
end;
--
$END
FUNCTION CREATERESOURCE(ABSPATH IN VARCHAR2, DATA IN CLOB)
return BOOLEAN
as
begin
  return &PACKAGE_PREFIX.XDB.CREATERESOURCE(ABSPATH, DATA);
end;
--
FUNCTION CREATERESOURCE(ABSPATH IN VARCHAR2, DATA IN BFILE, CSID IN NUMBER := 0)
return BOOLEAN
as
begin
  return &PACKAGE_PREFIX.XDB.CREATERESOURCE(ABSPATH, DATA, CSID);
end;
--
FUNCTION CREATERESOURCE(ABSPATH IN VARCHAR2, DATA IN BLOB, CSID IN NUMBER := 0)
return BOOLEAN
as
begin
  return &PACKAGE_PREFIX.XDB.CREATERESOURCE(ABSPATH, DATA, CSID);
end;
--
FUNCTION CREATEFOLDER(ABSPATH IN VARCHAR2)
return BOOLEAN
as
begin
  return &PACKAGE_PREFIX.XDB.CREATEFOLDER(ABSPATH);
end;
--
FUNCTION ADDRESOURCE(ABSPATH IN VARCHAR2, DATA IN VARCHAR2)
return NUMBER
as
begin
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
  raise UNIMPLEMENTED_FEATURE;
$ELSE
  return &PACKAGE_PREFIX.XDB.ADDRESOURCE(ABSPATH, DATA);
$END
end;
--
PROCEDURE DELETERESOURCE(ABSPATH IN VARCHAR2, DELETE_OPTION IN PLS_INTEGER := DBMS_XDB.DELETE_RESOURCE)
as
begin
   &PACKAGE_PREFIX.XDB.DELETERESOURCE(ABSPATH, DELETE_OPTION);
end;
--
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
--
PROCEDURE LINK(SRCPATH IN VARCHAR2, LINKFOLDER IN VARCHAR2, LINKNAME IN VARCHAR2)
as
begin
   &PACKAGE_PREFIX.XDB.LINK(SRCPATH, LINKFOLDER , LINKNAME);
end;
--
$ELSE
--
PROCEDURE LINK(SRCPATH IN VARCHAR2, LINKFOLDER IN VARCHAR2, LINKNAME IN VARCHAR2, LINKTYPE IN PLS_INTEGER := DBMS_XDB.LINK_TYPE_HARD)
as
begin
   &PACKAGE_PREFIX.XDB.LINK(SRCPATH, LINKFOLDER , LINKNAME , LINKTYPE);
end;
--
$END
--
PROCEDURE RENAMERESOURCE(SRCPATH IN VARCHAR2, DESTFOLDER IN VARCHAR2, NEWNAME IN VARCHAR2)
as
begin
   &PACKAGE_PREFIX.XDB.RENAMERESOURCE(SRCPATH, DESTFOLDER, NEWNAME);
end;
--
FUNCTION GETACLDOCUMENT(ABSPATH IN VARCHAR2)
return SYS.XMLTYPE
as
begin
  return &PACKAGE_PREFIX.XDB.GETACLDOCUMENT(ABSPATH);
end;
--
FUNCTION GETPRIVILEGES(RES_PATH IN VARCHAR2)
return SYS.XMLTYPE
as
begin
  return &PACKAGE_PREFIX.XDB.GETPRIVILEGES(RES_PATH);
end;
--
FUNCTION CHANGEPRIVILEGES(RES_PATH IN VARCHAR2, ACE IN XMLTYPE)
return PLS_INTEGER
as
begin
  return &PACKAGE_PREFIX.XDB.CHANGEPRIVILEGES(RES_PATH, ACE);
end;
--
FUNCTION CHECKPRIVILEGES(RES_PATH IN VARCHAR2, PRIVS IN XMLTYPE)
return PLS_INTEGER
as
begin
  return &PACKAGE_PREFIX.XDB.CHECKPRIVILEGES(RES_PATH , PRIVS);
end;
--
PROCEDURE SETFTPPORT(NEW_PORT IN NUMBER)
as
begin
   &PACKAGE_PREFIX.XDB.SETFTPPORT(NEW_PORT);
end;
--
FUNCTION GETFTPPORT return NUMBER
as
begin
  return &PACKAGE_PREFIX.XDB.GETFTPPORT;
end;
--
PROCEDURE SETHTTPPORT(NEW_PORT IN NUMBER)
as
begin
   &PACKAGE_PREFIX.XDB.SETHTTPPORT(NEW_PORT);
end;
--
FUNCTION GETHTTPPORT return NUMBER
as
begin
  return &PACKAGE_PREFIX.XDB.GETHTTPPORT;
end;
--
PROCEDURE SETLISTENERENDPOINT(ENDPOINT IN NUMBER, HOST IN VARCHAR2, PORT IN NUMBER, PROTOCOL IN NUMBER)
as
begin
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
  raise UNIMPLEMENTED_FEATURE;
$ELSE
   &PACKAGE_PREFIX.XDB.SETLISTENERENDPOINT(ENDPOINT, HOST, PORT, PROTOCOL);
$END
end;
--
PROCEDURE GETLISTENERENDPOINT(ENDPOINT IN NUMBER, HOST OUT VARCHAR2, PORT OUT NUMBER, PROTOCOL OUT NUMBER)
as
begin
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
  raise UNIMPLEMENTED_FEATURE;
$ELSE
   &PACKAGE_PREFIX.XDB.GETLISTENERENDPOINT(ENDPOINT, HOST, PORT , PROTOCOL);
$END
end;
--
PROCEDURE SETLISTENERLOCALACCESS(L_ACCESS BOOLEAN)
as
begin
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
  raise UNIMPLEMENTED_FEATURE;
$ELSE
   &PACKAGE_PREFIX.XDB.SETLISTENERLOCALACCESS(L_ACCESS);
$END
end;
--
PROCEDURE SETACL(RES_PATH IN VARCHAR2, ACL_PATH IN VARCHAR2)
as
begin
   &PACKAGE_PREFIX.XDB.SETACL(RES_PATH , ACL_PATH);
end;
--
FUNCTION ACLCHECKPRIVILEGES(ACL_PATH IN VARCHAR2, OWNER IN VARCHAR2, PRIVS IN XMLTYPE)
return PLS_INTEGER
as
begin
	return &PACKAGE_PREFIX.XDB.ACLCHECKPRIVILEGES(ACL_PATH, OWNER, PRIVS);
end; 
--
PROCEDURE CFG_REFRESH
as
begin
   &PACKAGE_PREFIX.XDB.CFG_REFRESH;
end;
--
FUNCTION CFG_GET
return SYS.XMLTYPE
as
begin
  return &PACKAGE_PREFIX.XDB.CFG_GET;
end;
--
PROCEDURE CFG_UPDATE(XDBCONFIG IN SYS.XMLTYPE)
as
begin
   &PACKAGE_PREFIX.XDB.CFG_UPDATE(XDBCONFIG);
end;
--
FUNCTION GETRESOID(ABSPATH IN VARCHAR2)
return RAW
as
begin
  return &PACKAGE_PREFIX.XDB.GETRESOID(ABSPATH);
end;
--
FUNCTION CREATEOIDPATH(OID IN RAW)
return VARCHAR2
as
begin
  return &PACKAGE_PREFIX.XDB.CREATEOIDPATH(OID);
end;
--
PROCEDURE APPENDRESOURCEMETADATA(ABSPATH IN VARCHAR2, DATA IN SYS.XMLTYPE)
as
begin
   &PACKAGE_PREFIX.XDB.APPENDRESOURCEMETADATA(ABSPATH, DATA);
end;
--
PROCEDURE APPENDRESOURCEMETADATA(ABSPATH IN VARCHAR2, DATA IN REF SYS.XMLTYPE)
as
begin
   &PACKAGE_PREFIX.XDB.APPENDRESOURCEMETADATA(ABSPATH, DATA);
end;
--
PROCEDURE DELETERESOURCEMETADATA(ABSPATH IN VARCHAR2, METADATA IN REF SYS.XMLTYPE, DELETE_OPTION IN PLS_INTEGER := DBMS_XDB.DELETE_RES_METADATA_CASCADE)
as
begin
   &PACKAGE_PREFIX.XDB.DELETERESOURCEMETADATA(ABSPATH, METADATA, DELETE_OPTION);
end;
--
PROCEDURE DELETERESOURCEMETADATA(ABSPATH IN VARCHAR2, METADATANS IN VARCHAR2, METADATANAME IN VARCHAR2, DELETE_OPTION IN PLS_INTEGER := DBMS_XDB.DELETE_RES_METADATA_CASCADE)
as
begin
   &PACKAGE_PREFIX.XDB.DELETERESOURCEMETADATA(ABSPATH, METADATANS, METADATANAME, DELETE_OPTION);
end;
--
PROCEDURE UPDATERESOURCEMETADATA(ABSPATH IN VARCHAR2, OLDMETADATA IN REF SYS.XMLTYPE, NEWMETADATA IN REF SYS.XMLTYPE)
as
begin
   &PACKAGE_PREFIX.XDB.UPDATERESOURCEMETADATA(ABSPATH, OLDMETADATA, NEWMETADATA);
end;
--
PROCEDURE UPDATERESOURCEMETADATA(ABSPATH IN VARCHAR2, OLDMETADATA IN REF SYS.XMLTYPE, NEWMETADATA IN XMLTYPE)
as
begin
   &PACKAGE_PREFIX.XDB.UPDATERESOURCEMETADATA(ABSPATH, OLDMETADATA, NEWMETADATA);
end;
--
PROCEDURE UPDATERESOURCEMETADATA(ABSPATH IN VARCHAR2, OLDNS IN VARCHAR2, OLDNAME IN VARCHAR, NEWMETADATA IN XMLTYPE)
as
begin
   &PACKAGE_PREFIX.XDB.UPDATERESOURCEMETADATA(ABSPATH, OLDNS , OLDNAME, NEWMETADATA);
end;
--
PROCEDURE UPDATERESOURCEMETADATA(ABSPATH IN VARCHAR2, OLDNS IN VARCHAR2, OLDNAME IN VARCHAR, NEWMETADATA IN REF SYS.XMLTYPE)
as
begin
   &PACKAGE_PREFIX.XDB.UPDATERESOURCEMETADATA(ABSPATH, OLDNS, OLDNAME , NEWMETADATA);
end;
--
PROCEDURE PURGERESOURCEMETADATA(ABSPATH IN VARCHAR2)
as
begin
   &PACKAGE_PREFIX.XDB.PURGERESOURCEMETADATA(ABSPATH);
end;
--
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
$ELSE
--
FUNCTION GETRESOURCE(ABSPATH IN VARCHAR2)
return DBMS_XDBRESOURCE.XDBRESOURCE
as
begin
  return &PACKAGE_PREFIX.XDB.GETRESOURCE(ABSPATH);
end;
--
$END
--
PROCEDURE REFRESHCONTENTSIZE( ABSPATH IN VARCHAR2, RECURSE IN BOOLEAN := FALSE)
as
begin
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
  raise UNIMPLEMENTED_FEATURE;
$ELSE
   &PACKAGE_PREFIX.XDB.REFRESHCONTENTSIZE( ABSPATH, RECURSE);
$END
end;
--
PROCEDURE PROCESSLINKS(ABSPATH IN VARCHAR2, RECURSE IN BOOLEAN := FALSE )
as
begin
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
  raise UNIMPLEMENTED_FEATURE;
$ELSE
   &PACKAGE_PREFIX.XDB.PROCESSLINKS(ABSPATH, RECURSE);
$END
end;
--
FUNCTION ISFOLDER(ABSPATH IN VARCHAR2)
return BOOLEAN
as
begin
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
  raise UNIMPLEMENTED_FEATURE;
$ELSE
  return &PACKAGE_PREFIX.XDB.ISFOLDER(ABSPATH);
$END
end;
--
PROCEDURE TOUCHRESOURCE(ABSPATH IN VARCHAR2 )
as
begin
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
  raise UNIMPLEMENTED_FEATURE;
$ELSE
   &PACKAGE_PREFIX.XDB.TOUCHRESOURCE(ABSPATH);
$END
end;
--
PROCEDURE CHANGEOWNER( ABSPATH IN VARCHAR2, OWNER IN VARCHAR2, RECURSE IN BOOLEAN := FALSE )
as
begin
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
  raise UNIMPLEMENTED_FEATURE;
$ELSE
   &PACKAGE_PREFIX.XDB.CHANGEOWNER( ABSPATH, OWNER, RECURSE );
$END
end;
--
PROCEDURE ADDMIMEMAPPING(EXTENSION IN VARCHAR2,MIMETYPE IN VARCHAR2)
as
begin
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
  raise UNIMPLEMENTED_FEATURE;
$ELSE
   &PACKAGE_PREFIX.XDB.ADDMIMEMAPPING(EXTENSION, MIMETYPE);
$END
end;
--
PROCEDURE DELETEMIMEMAPPING(EXTENSION IN VARCHAR2)
as
begin
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
  raise UNIMPLEMENTED_FEATURE;
$ELSE
   &PACKAGE_PREFIX.XDB.DELETEMIMEMAPPING(EXTENSION);
$END
end;
--
PROCEDURE ADDXMLEXTENSION(EXTENSION IN VARCHAR2)
as
begin
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
  raise UNIMPLEMENTED_FEATURE;
$ELSE
   &PACKAGE_PREFIX.XDB.ADDXMLEXTENSION(EXTENSION);
$END
end;
--
PROCEDURE DELETEXMLEXTENSION(EXTENSION IN VARCHAR2)
as
begin
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
  raise UNIMPLEMENTED_FEATURE;
$ELSE
   &PACKAGE_PREFIX.XDB.DELETEXMLEXTENSION(EXTENSION);
$END
end;
--
PROCEDURE ADDSERVLETMAPPING(PATTERN IN VARCHAR2, NAME IN VARCHAR2)
as
begin
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
  raise UNIMPLEMENTED_FEATURE;
$ELSE
   &PACKAGE_PREFIX.XDB.ADDSERVLETMAPPING(PATTERN,	NAME);
$END
end;
--
PROCEDURE DELETESERVLETMAPPING(NAME IN VARCHAR2)
as
begin
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
  raise UNIMPLEMENTED_FEATURE;
$ELSE
   &PACKAGE_PREFIX.XDB.DELETESERVLETMAPPING(NAME);
$END
end;
--
PROCEDURE ADDSERVLET(NAME IN VARCHAR2,LANGUAGE IN VARCHAR2,DISPNAME IN VARCHAR2,ICON IN VARCHAR2 := NULL,DESCRIPT IN VARCHAR2 := NULL,CLASS IN VARCHAR2 := NULL,JSPFILE IN VARCHAR2 := NULL,PLSQL IN VARCHAR2 := NULL,SCHEMA IN VARCHAR2 := NULL)
as
begin
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
  raise UNIMPLEMENTED_FEATURE;
$ELSE
   &PACKAGE_PREFIX.XDB.ADDSERVLET(NAME, LANGUAGE, DISPNAME, ICON, DESCRIPT, CLASS, JSPFILE, PLSQL, SCHEMA);
$END
end;
--
PROCEDURE DELETESERVLET(NAME IN VARCHAR2)
as
begin
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
  raise UNIMPLEMENTED_FEATURE;
$ELSE
   &PACKAGE_PREFIX.XDB.DELETESERVLET(NAME);
$END
end;
--
PROCEDURE ADDSERVLETSECROLE(SERVNAME IN VARCHAR2,	ROLENAME IN VARCHAR2,	ROLELINK IN VARCHAR2,	DESCRIPT IN VARCHAR2 := NULL)
as
begin
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
  raise UNIMPLEMENTED_FEATURE;
$ELSE
   &PACKAGE_PREFIX.XDB.ADDSERVLETSECROLE(SERVNAME, ROLENAME, ROLELINK, DESCRIPT);
$END
end;
--
PROCEDURE DELETESERVLETSECROLE(SERVNAME IN VARCHAR2,ROLENAME IN VARCHAR2)
as
begin
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
  raise UNIMPLEMENTED_FEATURE;
$ELSE
   &PACKAGE_PREFIX.XDB.DELETESERVLETSECROLE(SERVNAME,ROLENAME);
$END
end;
--
PROCEDURE ADDSCHEMALOCMAPPING(NAMESPACE IN VARCHAR2,ELEMENT IN VARCHAR2,SCHEMAURL IN VARCHAR2)
as
begin
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
  raise UNIMPLEMENTED_FEATURE;
$ELSE
   &PACKAGE_PREFIX.XDB.ADDSCHEMALOCMAPPING(NAMESPACE,ELEMENT, SCHEMAURL);
$END
end;
--
PROCEDURE DELETESCHEMALOCMAPPING(SCHEMAURL IN VARCHAR2)
as
begin
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
  raise UNIMPLEMENTED_FEATURE;
$ELSE
   &PACKAGE_PREFIX.XDB.DELETESCHEMALOCMAPPING(SCHEMAURL);
$END
end;
--
FUNCTION HASCHARCONTENT(ABSPATH IN VARCHAR2)
return BOOLEAN
as
begin
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
  raise UNIMPLEMENTED_FEATURE;
$ELSE
  return &PACKAGE_PREFIX.XDB.HASCHARCONTENT(ABSPATH);
$END
end;
--
FUNCTION HASXMLCONTENT(ABSPATH IN VARCHAR2)
return BOOLEAN
as
begin
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
  raise UNIMPLEMENTED_FEATURE;
$ELSE
  return &PACKAGE_PREFIX.XDB.HASXMLCONTENT(ABSPATH);
$END
end;
--
FUNCTION HASXMLREFERENCE(ABSPATH IN VARCHAR2)
return BOOLEAN
as
begin
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
  raise UNIMPLEMENTED_FEATURE;
$ELSE
  return &PACKAGE_PREFIX.XDB.HASXMLREFERENCE(ABSPATH);
$END
end;
--
FUNCTION HASBLOBCONTENT(ABSPATH IN VARCHAR2)
return BOOLEAN
as
begin
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
  raise UNIMPLEMENTED_FEATURE;
$ELSE
  return &PACKAGE_PREFIX.XDB.HASBLOBCONTENT(ABSPATH);
$END
end;
--
FUNCTION GETCONTENTCLOB(ABSPATH IN VARCHAR2)
return CLOB
as
begin
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
  raise UNIMPLEMENTED_FEATURE;
$ELSE
  return &PACKAGE_PREFIX.XDB.GETCONTENTCLOB(ABSPATH);
$END
end;
--
FUNCTION GETCONTENTBLOB(ABSPATH IN VARCHAR2,CSID OUT PLS_INTEGER,LOCKSRC IN BOOLEAN := FALSE)
return BLOB
as
begin
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
  raise UNIMPLEMENTED_FEATURE;
$ELSE
  return &PACKAGE_PREFIX.XDB.GETCONTENTBLOB(ABSPATH,CSID ,LOCKSRC);
$END
end;
--
FUNCTION GETCONTENTXMLTYPE(ABSPATH IN VARCHAR2)
return SYS.XMLTYPE
as
begin
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
  raise UNIMPLEMENTED_FEATURE;
$ELSE
  return &PACKAGE_PREFIX.XDB.GETCONTENTXMLTYPE(ABSPATH);
$END
end;
--
FUNCTION GETCONTENTVARCHAR2(ABSPATH IN VARCHAR2)
return VARCHAR2
as
begin
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
  raise UNIMPLEMENTED_FEATURE;
$ELSE
  return &PACKAGE_PREFIX.XDB.GETCONTENTVARCHAR2(ABSPATH);
$END
end;
--
FUNCTION GETCONTENTXMLREF(ABSPATH IN VARCHAR2)
return REF SYS.XMLTYPE
as
begin
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
  raise UNIMPLEMENTED_FEATURE;
$ELSE
  return &PACKAGE_PREFIX.XDB.GETCONTENTXMLREF(ABSPATH);
$END
end;
--
FUNCTION GETXDB_TABLESPACE return VARCHAR2
as
begin
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
  raise UNIMPLEMENTED_FEATURE;
$ELSE
  return &PACKAGE_PREFIX.XDB.GETXDB_TABLESPACE;
$END
end;
--
PROCEDURE ADDHTTPEXPIREMAPPING(PATTERN IN VARCHAR2, EXPIRE IN VARCHAR2)
as
begin
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
  raise UNIMPLEMENTED_FEATURE;
$ELSE
   &PACKAGE_PREFIX.XDB.ADDHTTPEXPIREMAPPING(PATTERN, EXPIRE);
$END
end;
--
PROCEDURE DELETEHTTPEXPIREMAPPING(PATTERN IN VARCHAR2)
as
begin
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
  raise UNIMPLEMENTED_FEATURE;
$ELSE
   &PACKAGE_PREFIX.XDB.DELETEHTTPEXPIREMAPPING(PATTERN);
$END
end;
--
FUNCTION GETHTTPREQUESTHEADER(HEADER_NAME IN VARCHAR2) return VARCHAR2
as
begin
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
  raise UNIMPLEMENTED_FEATURE;
$ELSE
  return &PACKAGE_PREFIX.XDB.GETHTTPREQUESTHEADER(HEADER_NAME);
$END
end;
--
end XDBPM_DBMS_XDB;
/
SHOW ERRORS
--
CREATE OR REPLACE PACKAGE XDBPM_DBMS_XDBRESOURCE
AUTHID &RIGHTS
as
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
$ELSE
  PROCEDURE FREERESOURCE(RES IN DBMS_XDBRESOURCE.XDBRESOURCE);
  FUNCTION GETACL(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) return VARCHAR2;
  FUNCTION GETACLDOCFROMRES(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) return XMLTYPE;
  FUNCTION GETAUTHOR(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) return VARCHAR2;
  FUNCTION GETCHARACTERSET(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) return VARCHAR2;
  FUNCTION GETCOMMENT(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) return VARCHAR2;
  FUNCTION GETCONTENTBLOB(RES IN DBMS_XDBRESOURCE.XDBRESOURCE, CSID OUT BINARY_INTEGER) return BLOB;
  FUNCTION GETCONTENTREF(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) return REF XMLTYPE;
  FUNCTION GETCONTENTTYPE(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) return VARCHAR2;
  FUNCTION GETCONTENTVARCHAR2(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) return VARCHAR2;
  FUNCTION GETCONTENTXML(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) return XMLTYPE;
  FUNCTION GETCREATIONDATE(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) return TIMESTAMP;
  FUNCTION GETCREATOR(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) return VARCHAR2;
  FUNCTION GETCUSTOMMETADATA(RES IN DBMS_XDBRESOURCE.XDBRESOURCE, XPATH VARCHAR2,NAMESPACE VARCHAR2) return XMLTYPE;
  FUNCTION GETDISPLAYNAME(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) return VARCHAR2;
  FUNCTION GETLANGUAGE(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) return VARCHAR2;
  FUNCTION GETLASTMODIFIER(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) return VARCHAR2;
  FUNCTION GETMODIFICATIONDATE(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) return TIMESTAMP;
  FUNCTION GETOWNER(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) return VARCHAR2;
  FUNCTION GETREFCOUNT(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) return BINARY_INTEGER;
  FUNCTION GETVERSIONID(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) return BINARY_INTEGER;
  FUNCTION HASACLCHANGED(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) return BOOLEAN;
  FUNCTION HASAUTHORCHANGED(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) return BOOLEAN;
  FUNCTION HASCHANGED(RES IN DBMS_XDBRESOURCE.XDBRESOURCE,XPATH VARCHAR2,NAMESPACE VARCHAR2) return BOOLEAN;
  FUNCTION HASCHARACTERSETCHANGED(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) return BOOLEAN;
  FUNCTION HASCOMMENTCHANGED(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) return BOOLEAN;
  FUNCTION HASCONTENTCHANGED(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) return BOOLEAN;
  FUNCTION HASCONTENTTYPECHANGED(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) return BOOLEAN;
  FUNCTION HASCREATIONDATECHANGED(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) return BOOLEAN;
  FUNCTION HASCREATORCHANGED(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) return BOOLEAN;
  FUNCTION HASCUSTOMMETADATACHANGED(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) return BOOLEAN;
  FUNCTION HASDISPLAYNAMECHANGED(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) return BOOLEAN;
  FUNCTION HASLANGUAGECHANGED(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) return BOOLEAN;
  FUNCTION HASLASTMODIFIERCHANGED(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) return BOOLEAN;
  FUNCTION HASMODIFICATIONDATECHANGED(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) return BOOLEAN;
  FUNCTION HASOWNERCHANGED(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) return BOOLEAN;
  FUNCTION HASREFCOUNTCHANGED(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) return BOOLEAN;
  FUNCTION HASVERSIONIDCHANGED(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) return BOOLEAN;
  FUNCTION ISFOLDER(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) return BOOLEAN;
  FUNCTION ISNULL(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) return BOOLEAN;
  FUNCTION MAKEDOCUMENT(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) return DBMS_XMLDOM.DOMDOCUMENT;
  PROCEDURE SAVE(RES IN DBMS_XDBRESOURCE.XDBRESOURCE);
  PROCEDURE SETACL(RES IN OUT DBMS_XDBRESOURCE.XDBRESOURCE,ACLPATH IN VARCHAR2);
  PROCEDURE SETAUTHOR(RES IN OUT DBMS_XDBRESOURCE.XDBRESOURCE,AUTHOR IN VARCHAR2);
  PROCEDURE SETCHARACTERSET(RES IN OUT DBMS_XDBRESOURCE.XDBRESOURCE,CHARSET IN VARCHAR2);
  PROCEDURE SETCOMMENT(RES IN OUT DBMS_XDBRESOURCE.XDBRESOURCE,COMMENT IN VARCHAR2);
  PROCEDURE SETCONTENT(RES IN OUT DBMS_XDBRESOURCE.XDBRESOURCE,DATA IN CLOB);
  PROCEDURE SETCONTENT(RES IN OUT DBMS_XDBRESOURCE.XDBRESOURCE,DATA IN BLOB, CSID IN BINARY_INTEGER);
  PROCEDURE SETCONTENT(RES IN OUT DBMS_XDBRESOURCE.XDBRESOURCE,DATA IN XMLTYPE);
  PROCEDURE SETCONTENT(RES IN OUT DBMS_XDBRESOURCE.XDBRESOURCE,DATA IN VARCHAR2);
  PROCEDURE SETCONTENT(RES IN OUT DBMS_XDBRESOURCE.XDBRESOURCE,DATA IN REF XMLTYPE, STICKY IN BOOLEAN DEFAULT TRUE);
  PROCEDURE SETCONTENT(RES IN OUT DBMS_XDBRESOURCE.XDBRESOURCE,DATA IN BFILE, CSID_BFILE IN BINARY_INTEGER);
  PROCEDURE SETCONTENTTYPE(RES IN OUT DBMS_XDBRESOURCE.XDBRESOURCE,CONTTYPE IN VARCHAR2);
  PROCEDURE SETCUSTOMMETADATA(RES IN DBMS_XDBRESOURCE.XDBRESOURCE, XPATH IN VARCHAR2, NAMESPACE IN VARCHAR2, NEWMETADATA IN XMLTYPE);
  PROCEDURE SETDISPLAYNAME(RES IN OUT DBMS_XDBRESOURCE.XDBRESOURCE,NAME IN VARCHAR2);
  PROCEDURE SETLANGUAGE(RES IN OUT DBMS_XDBRESOURCE.XDBRESOURCE,LANG IN VARCHAR2);
  PROCEDURE SETOWNER(RES IN OUT DBMS_XDBRESOURCE.XDBRESOURCE,OWNER IN VARCHAR2);
$END
end;
/
SHOW ERRORS
--
CREATE OR REPLACE PACKAGE BODY XDBPM_DBMS_XDBRESOURCE
as
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
$ELSE
  PROCEDURE FREERESOURCE(RES IN DBMS_XDBRESOURCE.XDBRESOURCE)
  as
  begin
       &PACKAGE_PREFIX.XDBRESOURCE.FREERESOURCE(RES);
  end;
  --
  FUNCTION GETACL(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) 
  return VARCHAR2
  as
  begin
    return &PACKAGE_PREFIX.XDBRESOURCE.GETACL(RES);
  end;
  --
  FUNCTION GETACLDOCFROMRES(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) 
  return XMLTYPE
  as
  begin
    return &PACKAGE_PREFIX.XDBRESOURCE.GETACLDOCFROMRES(RES);
  end;
  --
  FUNCTION GETAUTHOR(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) 
  return VARCHAR2
  as
  begin
    return &PACKAGE_PREFIX.XDBRESOURCE.GETAUTHOR(RES);
  end;
  --
  FUNCTION GETCHARACTERSET(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) 
  return VARCHAR2
  as
  begin
    return &PACKAGE_PREFIX.XDBRESOURCE.GETCHARACTERSET(RES);
  end;
  --
  FUNCTION GETCOMMENT(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) 
  return VARCHAR2
  as
  begin
    return &PACKAGE_PREFIX.XDBRESOURCE.GETCOMMENT(RES);
  end;
  --
  FUNCTION GETCONTENTBLOB(RES IN DBMS_XDBRESOURCE.XDBRESOURCE, CSID OUT BINARY_INTEGER) 
  return BLOB
  as
  begin
    return &PACKAGE_PREFIX.XDBRESOURCE.GETCONTENTBLOB(RES, CSID);
  end;
  --
  FUNCTION GETCONTENTREF(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) 
  return REF XMLTYPE
  as
  begin
    return &PACKAGE_PREFIX.XDBRESOURCE.GETCONTENTREF(RES);
  end;
  --
  FUNCTION GETCONTENTTYPE(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) 
  return VARCHAR2
  as
  begin
    return &PACKAGE_PREFIX.XDBRESOURCE.GETCONTENTTYPE(RES);
  end;
  --
  FUNCTION GETCONTENTVARCHAR2(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) 
  return VARCHAR2
  as
  begin
    return &PACKAGE_PREFIX.XDBRESOURCE.GETCONTENTVARCHAR2(RES);
  end;
  --
  FUNCTION GETCONTENTXML(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) 
  return XMLTYPE
  as
  begin
    return &PACKAGE_PREFIX.XDBRESOURCE.GETCONTENTXML(RES);
  end;
  --
  FUNCTION GETCREATIONDATE(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) 
  return TIMESTAMP
  as
  begin
    return &PACKAGE_PREFIX.XDBRESOURCE.GETCREATIONDATE(RES);
  end;
  --
  FUNCTION GETCREATOR(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) 
  return VARCHAR2
  as
  begin
    return &PACKAGE_PREFIX.XDBRESOURCE.GETCREATOR(RES);
  end;
  --
  FUNCTION GETCUSTOMMETADATA(RES IN DBMS_XDBRESOURCE.XDBRESOURCE, XPATH VARCHAR2,NAMESPACE VARCHAR2) 
  return XMLTYPE
  as
  begin
    return &PACKAGE_PREFIX.XDBRESOURCE.GETCUSTOMMETADATA(RES, XPATH, NAMESPACE);
  end;
  --
  FUNCTION GETDISPLAYNAME(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) 
  return VARCHAR2
  as
  begin
    return &PACKAGE_PREFIX.XDBRESOURCE.GETDISPLAYNAME(RES);
  end;
  --
  FUNCTION GETLANGUAGE(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) 
  return VARCHAR2
  as
  begin
    return &PACKAGE_PREFIX.XDBRESOURCE.GETLANGUAGE(RES);
  end;
  --
  FUNCTION GETLASTMODIFIER(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) 
  return VARCHAR2
  as
  begin
    return &PACKAGE_PREFIX.XDBRESOURCE.GETLASTMODIFIER(RES);
  end;
  --
  FUNCTION GETMODIFICATIONDATE(RES IN DBMS_XDBRESOURCE.XDBRESOURCE) 
  return TIMESTAMP
  as
  begin
    return &PACKAGE_PREFIX.XDBRESOURCE.GETMODIFICATIONDATE(RES);
  end;
  --
  FUNCTION GETOWNER(RES IN DBMS_XDBRESOURCE.XDBRESOURCE)
  return VARCHAR2
  as
  begin
    return &PACKAGE_PREFIX.XDBRESOURCE.GETOWNER(RES);
  end;
  --
  FUNCTION GETREFCOUNT(RES IN DBMS_XDBRESOURCE.XDBRESOURCE)
  return BINARY_INTEGER
  as
  begin
    return &PACKAGE_PREFIX.XDBRESOURCE.GETREFCOUNT(RES);
  end;
  --
  FUNCTION GETVERSIONID(RES IN DBMS_XDBRESOURCE.XDBRESOURCE)
  return BINARY_INTEGER
  as
  begin
    return &PACKAGE_PREFIX.XDBRESOURCE.GETVERSIONID(RES);
  end;
  --
  FUNCTION HASACLCHANGED(RES IN DBMS_XDBRESOURCE.XDBRESOURCE)
  return BOOLEAN
  as
  begin
    return &PACKAGE_PREFIX.XDBRESOURCE.HASACLCHANGED(RES);
  end;
  --
  FUNCTION HASAUTHORCHANGED(RES IN DBMS_XDBRESOURCE.XDBRESOURCE)
  return BOOLEAN
  as
  begin
    return &PACKAGE_PREFIX.XDBRESOURCE.HASAUTHORCHANGED(RES);
  end;
  --
  FUNCTION HASCHANGED(RES IN DBMS_XDBRESOURCE.XDBRESOURCE,XPATH VARCHAR2,NAMESPACE VARCHAR2)
  return BOOLEAN
  as
  begin
    return &PACKAGE_PREFIX.XDBRESOURCE.HASCHANGED(RES, XPATH, NAMESPACE);
  end;
  --
  FUNCTION HASCHARACTERSETCHANGED(RES IN DBMS_XDBRESOURCE.XDBRESOURCE)
  return BOOLEAN
  as
  begin
    return &PACKAGE_PREFIX.XDBRESOURCE.HASCHARACTERSETCHANGED(RES);
  end;
  --
  FUNCTION HASCOMMENTCHANGED(RES IN DBMS_XDBRESOURCE.XDBRESOURCE)
  return BOOLEAN
  as
  begin
    return &PACKAGE_PREFIX.XDBRESOURCE.HASCOMMENTCHANGED(RES);
  end;
  --
  FUNCTION HASCONTENTCHANGED(RES IN DBMS_XDBRESOURCE.XDBRESOURCE)
  return BOOLEAN
  as
  begin
    return &PACKAGE_PREFIX.XDBRESOURCE.HASCONTENTCHANGED(RES);
  end;
  --
  FUNCTION HASCONTENTTYPECHANGED(RES IN DBMS_XDBRESOURCE.XDBRESOURCE)
  return BOOLEAN
  as
  begin
    return &PACKAGE_PREFIX.XDBRESOURCE.HASCONTENTTYPECHANGED(RES);
  end;
  --
  FUNCTION HASCREATIONDATECHANGED(RES IN DBMS_XDBRESOURCE.XDBRESOURCE)
  return BOOLEAN
  as
  begin
    return &PACKAGE_PREFIX.XDBRESOURCE.HASCREATIONDATECHANGED(RES);
  end;
  --
  FUNCTION HASCREATORCHANGED(RES IN DBMS_XDBRESOURCE.XDBRESOURCE)
  return BOOLEAN
  as
  begin
    return &PACKAGE_PREFIX.XDBRESOURCE.HASCREATORCHANGED(RES);
  end;
  --
  FUNCTION HASCUSTOMMETADATACHANGED(RES IN DBMS_XDBRESOURCE.XDBRESOURCE)
  return BOOLEAN
  as
  begin
    return &PACKAGE_PREFIX.XDBRESOURCE.HASCUSTOMMETADATACHANGED(RES);
  end;
  --
  FUNCTION HASDISPLAYNAMECHANGED(RES IN DBMS_XDBRESOURCE.XDBRESOURCE)
  return BOOLEAN
  as
  begin
    return &PACKAGE_PREFIX.XDBRESOURCE.HASDISPLAYNAMECHANGED(RES);
  end;
  --
  FUNCTION HASLANGUAGECHANGED(RES IN DBMS_XDBRESOURCE.XDBRESOURCE)
  return BOOLEAN
  as
  begin
    return &PACKAGE_PREFIX.XDBRESOURCE.HASLANGUAGECHANGED(RES);
  end;
  --
  FUNCTION HASLASTMODIFIERCHANGED(RES IN DBMS_XDBRESOURCE.XDBRESOURCE)
  return BOOLEAN
  as
  begin
    return &PACKAGE_PREFIX.XDBRESOURCE.HASLASTMODIFIERCHANGED(RES);
  end;
  --
  FUNCTION HASMODIFICATIONDATECHANGED(RES IN DBMS_XDBRESOURCE.XDBRESOURCE)
  return BOOLEAN
  as
  begin
    return &PACKAGE_PREFIX.XDBRESOURCE.HASMODIFICATIONDATECHANGED(RES);
  end;
  --
  FUNCTION HASOWNERCHANGED(RES IN DBMS_XDBRESOURCE.XDBRESOURCE)
  return BOOLEAN
  as
  begin
    return &PACKAGE_PREFIX.XDBRESOURCE.HASOWNERCHANGED(RES);
  end;
  --
  FUNCTION HASREFCOUNTCHANGED(RES IN DBMS_XDBRESOURCE.XDBRESOURCE)
  return BOOLEAN
  as
  begin
    return &PACKAGE_PREFIX.XDBRESOURCE.HASREFCOUNTCHANGED(RES);
  end;
  --
  FUNCTION HASVERSIONIDCHANGED(RES IN DBMS_XDBRESOURCE.XDBRESOURCE)
  return BOOLEAN
  as
  begin
    return &PACKAGE_PREFIX.XDBRESOURCE.HASVERSIONIDCHANGED(RES);
  end;
  --
  FUNCTION ISFOLDER(RES IN DBMS_XDBRESOURCE.XDBRESOURCE)
  return BOOLEAN
  as
  begin
    return &PACKAGE_PREFIX.XDBRESOURCE.ISFOLDER(RES);
  end;
  --
  FUNCTION ISNULL(RES IN DBMS_XDBRESOURCE.XDBRESOURCE)
  return BOOLEAN
  as
  begin
    return &PACKAGE_PREFIX.XDBRESOURCE.ISNULL(RES);
  end;
  --
  FUNCTION MAKEDOCUMENT(RES IN DBMS_XDBRESOURCE.XDBRESOURCE)
  return DBMS_XMLDOM.DOMDOCUMENT
  as
  begin
    return &PACKAGE_PREFIX.XDBRESOURCE.MAKEDOCUMENT(RES);
  end;
  --
  PROCEDURE SAVE(RES IN DBMS_XDBRESOURCE.XDBRESOURCE)
  as
  begin
       &PACKAGE_PREFIX.XDBRESOURCE.SAVE(RES);
  end;
  --
  PROCEDURE SETACL(RES IN OUT DBMS_XDBRESOURCE.XDBRESOURCE,ACLPATH IN VARCHAR2)
  as
  begin
       &PACKAGE_PREFIX.XDBRESOURCE.SETACL(RES, ACLPATH);
  end;
  --
  PROCEDURE SETAUTHOR(RES IN OUT DBMS_XDBRESOURCE.XDBRESOURCE,AUTHOR IN VARCHAR2)
  as
  begin
       &PACKAGE_PREFIX.XDBRESOURCE.SETAUTHOR(RES, AUTHOR);
  end;
  --
  PROCEDURE SETCHARACTERSET(RES IN OUT DBMS_XDBRESOURCE.XDBRESOURCE,CHARSET IN VARCHAR2)
  as
  begin
       &PACKAGE_PREFIX.XDBRESOURCE.SETCHARACTERSET(RES, CHARSET);
  end;
  --
  PROCEDURE SETCOMMENT(RES IN OUT DBMS_XDBRESOURCE.XDBRESOURCE,COMMENT IN VARCHAR2)
  as
  begin
       &PACKAGE_PREFIX.XDBRESOURCE.SETCOMMENT(RES, COMMENT);
  end;
  --
  PROCEDURE SETCONTENT(RES IN OUT DBMS_XDBRESOURCE.XDBRESOURCE,DATA IN CLOB)
  as
  begin
       &PACKAGE_PREFIX.XDBRESOURCE.SETCONTENT(RES, DATA);
  end;
  --
  PROCEDURE SETCONTENT(RES IN OUT DBMS_XDBRESOURCE.XDBRESOURCE,DATA IN BLOB, CSID IN BINARY_INTEGER)
  as
  begin
       &PACKAGE_PREFIX.XDBRESOURCE.SETCONTENT(RES, DATA, CSID);
  end;
  --
  PROCEDURE SETCONTENT(RES IN OUT DBMS_XDBRESOURCE.XDBRESOURCE,DATA IN XMLTYPE)
  as
  begin
       &PACKAGE_PREFIX.XDBRESOURCE.SETCONTENT(RES, DATA);
  end;
  --
  PROCEDURE SETCONTENT(RES IN OUT DBMS_XDBRESOURCE.XDBRESOURCE,DATA IN VARCHAR2)
  as
  begin
       &PACKAGE_PREFIX.XDBRESOURCE.SETCONTENT(RES, DATA);
  end;
  --
  PROCEDURE SETCONTENT(RES IN OUT DBMS_XDBRESOURCE.XDBRESOURCE,DATA IN REF XMLTYPE, STICKY IN BOOLEAN DEFAULT TRUE)
  as
  begin
       &PACKAGE_PREFIX.XDBRESOURCE.SETCONTENT(RES, DATA, STICKY);
  end;
  --
  PROCEDURE SETCONTENT(RES IN OUT DBMS_XDBRESOURCE.XDBRESOURCE,DATA IN BFILE, CSID_BFILE IN BINARY_INTEGER)
  as
  begin
       &PACKAGE_PREFIX.XDBRESOURCE.SETCONTENT(RES, DATA, CSID_BFILE);
  end;
  --
  PROCEDURE SETCONTENTTYPE(RES IN OUT DBMS_XDBRESOURCE.XDBRESOURCE,CONTTYPE IN VARCHAR2)
  as
  begin
       &PACKAGE_PREFIX.XDBRESOURCE.SETCONTENTTYPE(RES, CONTTYPE);
  end;
  --
  PROCEDURE SETCUSTOMMETADATA(RES IN DBMS_XDBRESOURCE.XDBRESOURCE, XPATH IN VARCHAR2, NAMESPACE IN VARCHAR2, NEWMETADATA IN XMLTYPE)
  as
  begin
       &PACKAGE_PREFIX.XDBRESOURCE.SETCUSTOMMETADATA(RES, XPATH, NAMESPACE, NEWMETADATA);
  end;
  --
  PROCEDURE SETDISPLAYNAME(RES IN OUT DBMS_XDBRESOURCE.XDBRESOURCE,NAME IN VARCHAR2)
  as
  begin
       &PACKAGE_PREFIX.XDBRESOURCE.SETDISPLAYNAME(RES, NAME);
  end;
  --
  PROCEDURE SETLANGUAGE(RES IN OUT DBMS_XDBRESOURCE.XDBRESOURCE,LANG IN VARCHAR2)
  as
  begin
       &PACKAGE_PREFIX.XDBRESOURCE.SETLANGUAGE(RES, LANG);
  end;
  --
  PROCEDURE SETOWNER(RES IN OUT DBMS_XDBRESOURCE.XDBRESOURCE,OWNER IN VARCHAR2)
  as
  begin
       &PACKAGE_PREFIX.XDBRESOURCE.SETOWNER(RES, OWNER);
  end;
$END
end;
/
SHOW ERRORS
--
CREATE OR REPLACE PACKAGE XDBPM_DBMS_RESCONFIG
AUTHID &RIGHTS
as
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
$ELSE
  PROCEDURE ADDREPOSITORYRESCONFIG(RCPATH VARCHAR2, POS BINARY_INTEGER DEFAULT NULL);
  PROCEDURE ADDRESCONFIG(RESPATH VARCHAR2,RCPATH VARCHAR2, POS BINARY_INTEGER DEFAULT NULL);
  PROCEDURE APPENDRESCONFIG(RESPATH VARCHAR2, RCPATH VARCHAR2, APPENDOPTION BINARY_INTEGER);

  PROCEDURE DELETEREPOSITORYRESCONFIG(POS BINARY_INTEGER);
  PROCEDURE DELETERESCONFIG(RESPATH VARCHAR2, POS BINARY_INTEGER);
  PROCEDURE DELETERESCONFIG(RESPATH VARCHAR2, RCPATH VARCHAR2, DELETEOPTION BINARY_INTEGER);
  
  FUNCTION GETREPOSITORYRESCONFIG(POS BINARY_INTEGER) return XMLTYPE;
  FUNCTION GETREPOSITORYRESCONFIGPATHS return XDB.XDB$STRING_LIST_T;
  FUNCTION GETRESCONFIG(RESPATH VARCHAR2, POS BINARY_INTEGER) return XMLTYPE;
  FUNCTION GETRESCONFIGPATHS(RESPATH VARCHAR2) return XDB.XDB$STRING_LIST_T;
$END
end;
/
show errors 
--
CREATE OR REPLACE PACKAGE BODY XDBPM_DBMS_RESCONFIG 
as
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
$ELSE
PROCEDURE ADDREPOSITORYRESCONFIG(RCPATH VARCHAR2, POS BINARY_INTEGER  DEFAULT NULL)
as
begin
   &PACKAGE_PREFIX.RESCONFIG.ADDREPOSITORYRESCONFIG(RCPATH,POS);
end;
--
PROCEDURE ADDRESCONFIG(RESPATH VARCHAR2,RCPATH VARCHAR2, POS BINARY_INTEGER DEFAULT NULL)
as
begin
   &PACKAGE_PREFIX.RESCONFIG.ADDRESCONFIG(RESPATH,RCPATH,POS);
end;
--
PROCEDURE APPENDRESCONFIG(RESPATH VARCHAR2, RCPATH VARCHAR2, APPENDOPTION BINARY_INTEGER)
as
begin
   &PACKAGE_PREFIX.RESCONFIG.APPENDRESCONFIG(RESPATH,RCPATH,APPENDOPTION);
end;
--
PROCEDURE DELETEREPOSITORYRESCONFIG(POS BINARY_INTEGER)
as
begin
   &PACKAGE_PREFIX.RESCONFIG.DELETEREPOSITORYRESCONFIG(POS);
end;
--
PROCEDURE DELETERESCONFIG(RESPATH VARCHAR2, POS BINARY_INTEGER)
as
begin
   &PACKAGE_PREFIX.RESCONFIG.DELETERESCONFIG(RESPATH, POS);
end;
PROCEDURE DELETERESCONFIG(RESPATH VARCHAR2, RCPATH VARCHAR2, DELETEOPTION BINARY_INTEGER)
as
begin
   &PACKAGE_PREFIX.RESCONFIG.DELETERESCONFIG(RESPATH,RCPATH,DELETEOPTION);
end;
--
FUNCTION GETREPOSITORYRESCONFIG(POS BINARY_INTEGER)
return XMLTYPE
as
begin
  return &PACKAGE_PREFIX.RESCONFIG.GETREPOSITORYRESCONFIG(POS);
end;
--
FUNCTION GETREPOSITORYRESCONFIGPATHS
return XDB.XDB$STRING_LIST_T
as
begin
  return &PACKAGE_PREFIX.RESCONFIG.GETREPOSITORYRESCONFIGPATHS();
end;
--
FUNCTION GETRESCONFIG(RESPATH VARCHAR2, POS BINARY_INTEGER)
return XMLTYPE
as
begin
  return &PACKAGE_PREFIX.RESCONFIG.GETRESCONFIG(RESPATH, POS);
end;
--
FUNCTION GETRESCONFIGPATHS(RESPATH VARCHAR2)
return XDB.XDB$STRING_LIST_T
as
begin
  return &PACKAGE_PREFIX.RESCONFIG.GETRESCONFIGPATHS(RESPATH);
end;
--
$END
end;
/
show errors
--
CREATE OR REPLACE PACKAGE XDBPM_DBMS_XDB_VERSION
AUTHID &RIGHTS
as
  FUNCTION CHECKIN (PATHNAME IN VARCHAR2) return RAW;
  PROCEDURE CHECKOUT(PATHNAME IN VARCHAR2);
  FUNCTION GETCONTENTSBLOBBYRESID(RESID IN RAW) return BLOB;
  FUNCTION GETCONTENTSCLOBBYRESID (RESID IN RAW) return CLOB;
  FUNCTION GETCONTENTSXMLBYRESID(RESID IN RAW) return XMLTYPE;
  FUNCTION GETPREDECESSORS(PATHNAME IN VARCHAR2) return XDB.DBMS_XDB_VERSION.RESID_LIST_TYPE;
  FUNCTION GETPREDSBYRESID(RESID IN RAW) return XDB.DBMS_XDB_VERSION.RESID_LIST_TYPE;
  FUNCTION GETRESOURCEBYRESID(RESID IN RAW) return XMLTYPE;
  FUNCTION GETSUCCESSORS(PATHNAME IN VARCHAR2) return XDB.DBMS_XDB_VERSION.RESID_LIST_TYPE;
  FUNCTION GETSUCCSBYRESID(RESID IN RAW) return XDB.DBMS_XDB_VERSION.RESID_LIST_TYPE;
  FUNCTION ISCHECKEDOUT(PATHNAME IN VARCHAR2) return BOOLEAN;
  FUNCTION MAKEVERSIONED(PATHNAME IN VARCHAR2)  return RAW;
  FUNCTION UNCHECKOUT(PATHNAME IN VARCHAR2) return RAW;
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
$ELSIF DBMS_DB_VERSION.VER_LE_11_1 $THEN
$ELSIF DBMS_DB_VERSION.VER_LE_11_2 $THEN
$ELSE
  PROCEDURE CHECKIN_INT(PATHNAME IN VARCHAR2, RESID OUT RAW);
  PROCEDURE UNCHECKOUT_INT(PATHNAME IN VARCHAR2, RESID OUT RAW);
  PROCEDURE MAKEVERSIONED_INT(PATHNAME IN VARCHAR2, RESID OUT RAW);
$END
end;
/
--
show errors
--
CREATE OR REPLACE PACKAGE BODY XDBPM_DBMS_XDB_VERSION
as
  FUNCTION CHECKIN (PATHNAME IN VARCHAR2) 
  return RAW
  as
  begin
    return &PACKAGE_PREFIX.XDB_VERSION.CHECKIN (PATHNAME);
  end;
  --
  PROCEDURE CHECKOUT(PATHNAME IN VARCHAR2)
  as 
  begin
    &PACKAGE_PREFIX.XDB_VERSION.CHECKOUT(PATHNAME);
  end;
  --
  FUNCTION GETCONTENTSBLOBBYRESID(RESID IN RAW) 
  return BLOB
  as
  begin
    return &PACKAGE_PREFIX.XDB_VERSION.GETCONTENTSBLOBBYRESID(RESID);
  end;
  --
  FUNCTION GETCONTENTSCLOBBYRESID (RESID IN RAW) 
  return CLOB
  as
  begin
    return &PACKAGE_PREFIX.XDB_VERSION.GETCONTENTSCLOBBYRESID(RESID);
  end;
  --
  FUNCTION GETCONTENTSXMLBYRESID(RESID IN RAW) 
  return XMLTYPE
  as
  begin
    return &PACKAGE_PREFIX.XDB_VERSION.GETCONTENTSXMLBYRESID(RESID);
  end;
  --
  FUNCTION GETPREDECESSORS(PATHNAME IN VARCHAR2) 
  return XDB.DBMS_XDB_VERSION.RESID_LIST_TYPE
  as
  begin
    return &PACKAGE_PREFIX.XDB_VERSION.GETPREDECESSORS(PATHNAME);
  end;
  --
  FUNCTION GETPREDSBYRESID(RESID IN RAW) 
  return XDB.DBMS_XDB_VERSION.RESID_LIST_TYPE
  as
  begin
    return &PACKAGE_PREFIX.XDB_VERSION.GETPREDSBYRESID(RESID);
  end;
  --
  FUNCTION GETRESOURCEBYRESID(RESID IN RAW) 
  return XMLTYPE
  as
  begin
    return &PACKAGE_PREFIX.XDB_VERSION.GETRESOURCEBYRESID(RESID);
  end;
  --
  FUNCTION GETSUCCESSORS(PATHNAME IN VARCHAR2) 
  return XDB.DBMS_XDB_VERSION.RESID_LIST_TYPE
  as
  begin
    return &PACKAGE_PREFIX.XDB_VERSION.GETSUCCESSORS(PATHNAME);
  end;
  --
  FUNCTION GETSUCCSBYRESID(RESID IN RAW) 
  return XDB.DBMS_XDB_VERSION.RESID_LIST_TYPE
  as
  begin
    return &PACKAGE_PREFIX.XDB_VERSION.GETSUCCSBYRESID(RESID);
  end;
  --
  FUNCTION ISCHECKEDOUT(PATHNAME IN VARCHAR2) 
  return BOOLEAN
  as
  begin
    return &PACKAGE_PREFIX.XDB_VERSION.ISCHECKEDOUT(PATHNAME);
  end;
  --
  FUNCTION MAKEVERSIONED(PATHNAME IN VARCHAR2)  
  return RAW
  as
  begin
    return &PACKAGE_PREFIX.XDB_VERSION.MAKEVERSIONED(PATHNAME) ;
  end;
  --
  FUNCTION UNCHECKOUT(PATHNAME IN VARCHAR2) 
  return RAW
  as
  begin
    return &PACKAGE_PREFIX.XDB_VERSION.UNCHECKOUT(PATHNAME);
  end;
  --
$IF DBMS_DB_VERSION.VER_LE_10_2 $THEN
$ELSIF DBMS_DB_VERSION.VER_LE_11_1 $THEN
$ELSIF DBMS_DB_VERSION.VER_LE_11_2 $THEN
$ELSE
  PROCEDURE MAKEVERSIONED_INT(PATHNAME IN VARCHAR2, RESID OUT RAW)
  as 
  begin
    &PACKAGE_PREFIX.XDB_VERSION.MAKEVERSIONED_INT(PATHNAME, RESID);
  end;
  --
  PROCEDURE CHECKIN_INT(PATHNAME IN VARCHAR2, RESID OUT RAW)
  as 
  begin
    &PACKAGE_PREFIX.XDB_VERSION.CHECKIN_INT(PATHNAME, RESID);
  end;
  --
  PROCEDURE UNCHECKOUT_INT(PATHNAME IN VARCHAR2, RESID OUT RAW)
  as 
  begin
    &PACKAGE_PREFIX.XDB_VERSION.UNCHECKOUT_INT(PATHNAME, RESID);
  end;
$END
end;
/
--
show errors